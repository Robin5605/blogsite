name: "Docker Build and Push"

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: "blog"
  ECS_SERVICE: blog-service
  ECS_CLUSTER: blogsite
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: robin5605/blogsite
  ECS_TASK_DEFINITION: "ECS_TASK_DEFINITION.json"
  CONTAINER_NAME: "blog"

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio.
      id-token: write

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c

      - name: "Install cosign"
        uses: sigstore/cosign-installer@c3667d99424e7e6047999fb6246c0da843953c65
        with:
          cosign-release: "v1.13.1"

      - name: "Setup Docker buildx"
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@261a7de32bda11ba01f4d75c4ed6caf3739e54be

      - name: "Log into registry ${{ env.REGISTRY }}"
        uses: docker/login-action@ec9cdf07d570632daeb912f5b2099cb9ec1d01e6
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: robin5605
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Extract Docker metadata"
        id: meta
        uses: docker/metadata-action@3343011071fa59c64a174cc6aa415dc13b31b7b2
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      - name: "Build and push Docker image"
        id: build-and-push
        uses: docker/build-push-action@35434f557ad77672899d67f7992fb5560bda1071
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            git_sha=${{ github.sha }}
            aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: "Sign the published Docker image"
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: cosign sign ${{ env.GHCR_REGISTRY }}/${{ env.GHCR_IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@61b0c00c3743b70987a73a1faf577f0d167d1574
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:master
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
